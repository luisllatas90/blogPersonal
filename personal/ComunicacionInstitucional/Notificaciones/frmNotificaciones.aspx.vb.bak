Imports System.Net
Imports System.IO
Imports System.Data
Imports System.Collections.Generic

Partial Class sistema_Notificaciones_frmNotificaciones
    Inherits System.Web.UI.Page

#Region "Declaracion de Variables"
    'ENTIDADES
    Dim me_Notificacion As e_Notificaciones
    Dim me_Categoria As e_Categoria

    'DATOS
    Dim md_Notificacion As New d_Notificaciones
    Dim md_Categoria As New d_Categoria
    Dim md_Funciones As New d_Funciones

    'VARIABLES
    Dim cod_user As Integer = 0
    Dim codigo_apl As Integer = 0

    Public Enum MessageType
        success
        [error]
        info
        warning
    End Enum

#End Region

#Region "Eventos"

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Try
            If (Session("id_per") Is Nothing OrElse Session("perlogin") Is Nothing) Then
                Response.Redirect("https://intranet.usat.edu.pe/campusvirtual/sinacceso.html")
            End If

            cod_user = Session("id_per")            
            codigo_apl = Request.QueryString("apl")

            If IsPostBack = False Then
                Call mt_LimpiarVariablesSession()
                Call mt_CargarComboClasificacion()
            End If
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Protected Sub btnListar_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnListar.Click
        Try            
            Call mt_CargarDatos()
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Protected Sub btnNuevo_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnNuevo.Click
        Try
            Session("frmNotificaciones-codigo_not") = 0

            Call mt_LimpiarControles("Registro")

            Call mt_UpdatePanel("Registro")

            Call mt_FlujoTabs("Registro")

        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Protected Sub grwLista_RowCommand(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewCommandEventArgs) Handles grwLista.RowCommand
        Try
            Dim index As Integer = 0 : index = CInt(e.CommandArgument)
            Session("frmNotificaciones-codigo_not") = Me.grwLista.DataKeys(index).Values("codigo_not").ToString

            Select Case e.CommandName
                Case "Editar"
                    If Not fu_ValidarCargarFormularioRegistro() Then Exit Sub

                    If Not mt_CargarFormularioRegistro(CInt(Session("frmNotificaciones-codigo_not"))) Then Exit Sub

                    Call mt_UpdatePanel("Registro")

                    Call mt_FlujoTabs("Registro")

                Case "Eliminar"
                    If Not fu_ValidarCargarFormularioRegistro() Then Exit Sub

                    If Not mt_EliminarNotificacion(CInt(Session("frmNotificaciones-codigo_not"))) Then Exit Sub

                    Call btnListar_Click(Nothing, Nothing)

            End Select
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Protected Sub btnSalir_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSalir.Click
        Try
            Call btnListar_Click(Nothing, Nothing)

            Call mt_FlujoTabs("Listado")

        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Protected Sub btnGuardar_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGuardar.Click
        Try
            If mt_RegistrarNotificacion(CInt(Session("frmNotificaciones-codigo_not"))) Then
                Call btnListar_Click(Nothing, Nothing)
                Call mt_FlujoTabs("Listado")
                Exit Sub
            End If
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Protected Sub btnEnvioPrueba_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnEnvioPrueba.Click
        Try
            Call mt_EnvioTest()

            mt_ShowMessage("¡La notificación se envío exitosamente!", MessageType.success)
            udpFiltros.Update()
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

#End Region

#Region "Metodos"

    Private Sub mt_EnvioTest()
        Try
            'Parametros de las notificaciones
            Dim nombre_escuela As String = "EDUCACIÓN"
            Dim nombre_bachiller As String = "Vargas Arévalo Mario Edgard"
            Dim nombre_tesis As String = "ANÁLISIS DE LOS CONTENIDOS TEMÁTICOS SOBRE EDUCACIÓN SEXUAL EN LOS TEXTOS DEL ÁREA DE TUTORIA 2005-2014 PROPUESTOS POR EL MINISTERIOS DE EDUCACIÓN"
            Dim dia_sustentacion As String = "Miércoles 11 de Marzo 2020"
            Dim hora_sustentacion As String = "12:00 m."
            Dim aula_sustentacion As String = "Aula 302 (J. Pablo II)"

            Dim grado_jurado As String = "Mgtr."
            Dim nombre_jurado As String = "Jara Cotrina Araceli"

            '================================================================================================================
            '                           ENVÍO DE NOTIFICACIÓN A EGRESADO
            '================================================================================================================

            ClsComunicacionInstitucional.EnviarNotificacion("EMAIL", "SUST", "STEG", "1", cod_user, "codigo_pso", 33233, codigo_apl, "jbanda@usat.edu.pe", "", "correoCampusVirtual", _
                                                            nombre_escuela, nombre_bachiller, nombre_tesis, dia_sustentacion, hora_sustentacion, aula_sustentacion)


            '================================================================================================================
            '                           ENVÍO DE NOTIFICACIÓN A JURADO
            '================================================================================================================

            ClsComunicacionInstitucional.EnviarNotificacion("EMAIL", "SUST", "STJU", "1", cod_user, "codigo_pso", 13268, codigo_apl, "jbanda@usat.edu.pe", "", "correoCampusVirtual", _
                                                            nombre_escuela, grado_jurado, nombre_jurado, nombre_tesis, nombre_bachiller, dia_sustentacion, hora_sustentacion, aula_sustentacion)

        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Private Sub mt_ShowMessage(ByVal Message As String, ByVal type As MessageType)
        Try
            Me.udpScripts.Update()
            ScriptManager.RegisterStartupScript(Me, Me.Page.GetType, "showMessage", "showMessage('" & Message & "','" & type.ToString & "');", True)
        Catch ex As Exception
            Throw ex
        End Try
    End Sub

    Private Sub mt_UpdatePanel(ByVal ls_panel As String)
        Try
            Select Case ls_panel
                Case "Filtros"
                    Me.udpFiltros.Update()
                    ScriptManager.RegisterStartupScript(Me, Me.Page.GetType, "udpFiltrosUpdate", "udpFiltrosUpdate();", True)

                Case "Lista"
                    Me.udpLista.Update()
                    ScriptManager.RegisterStartupScript(Me, Me.Page.GetType, "udpListaUpdate", "udpListaUpdate();", True)

                Case "Registro"
                    Me.udpRegistro.Update()
                    ScriptManager.RegisterStartupScript(Me, Me.Page.GetType, "udpRegistroUpdate", "udpRegistroUpdate();", True)

            End Select
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Private Sub mt_FlujoTabs(ByVal ls_tab As String)
        Try
            Select Case ls_tab
                Case "Registro"
                    Me.udpScripts.Update()
                    ScriptManager.RegisterStartupScript(Me, Me.Page.GetType, "flujoTabs", "flujoTabs('registro-tab');", True)

                Case "Listado"
                    Me.udpScripts.Update()
                    ScriptManager.RegisterStartupScript(Me, Me.Page.GetType, "flujoTabs", "flujoTabs('listado-tab');", True)

            End Select
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Private Sub mt_CargarComboClasificacion()
        Try
            Dim dt As New Data.DataTable : me_Categoria = New e_Categoria

            With me_Categoria
                .operacion = "GEN"
                .grupo_cat = "CLASIFICACION_NOTIFICACION"
            End With
            dt = md_Categoria.ListarCategoria(me_Categoria)

            Call md_Funciones.CargarCombo(Me.cmbClasificacion, dt, "abreviatura_cat", "nombre_cat", True, "[-- SELECCIONE --]", "")
            Call md_Funciones.CargarCombo(Me.cmbClasificacionFiltro, dt, "abreviatura_cat", "nombre_cat", True, "[-- SELECCIONE --]", "")
            dt.Dispose()
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Private Sub mt_LimpiarControles(ByVal ls_tab As String)
        Try
            Select Case ls_tab
                Case "Registro"
                    Me.cmbTipo.SelectedValue = String.Empty
                    Me.cmbClasificacion.SelectedValue = String.Empty
                    Me.txtNombre.Text = String.Empty
                    Me.txtAbreviatura.Text = String.Empty
                    Me.txtVersion.Text = String.Empty
                    Me.txtAsunto.Text = String.Empty
                    Me.txtPlantilla.Value = String.Empty
            End Select
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Private Sub mt_LimpiarVariablesSession()
        Try
            Session("frmNotificaciones-codigo_not") = Nothing
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Private Sub mt_CargarDatos()
        Try
            Dim dt As New DataTable : me_Notificacion = New e_Notificaciones

            If Me.grwLista.Rows.Count > 0 Then Me.grwLista.DataSource = Nothing : Me.grwLista.DataBind()

            With me_Notificacion
                .operacion = "LIS"
                .tipo_not = cmbTipoFiltro.SelectedValue
                .clasificacion_not = cmbClasificacionFiltro.SelectedValue
            End With

            dt = md_Notificacion.ListarNotificacion(me_Notificacion)

            Me.grwLista.DataSource = dt
            Me.grwLista.DataBind()

            Call md_Funciones.AgregarHearders(grwLista)

            Call mt_UpdatePanel("Lista")
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Sub

    Private Function mt_CargarFormularioRegistro(ByVal codigo_not As Integer) As Boolean
        Try
            me_Notificacion = md_Notificacion.GetNotificacion(codigo_not)

            If me_Notificacion.codigo_not = 0 Then mt_ShowMessage("El registro seleccionado no ha sido encontrado.", MessageType.warning) : Return False

            Call mt_LimpiarControles("Registro")

            With me_Notificacion
                Me.txtNombre.Text = .nombre_not
                Me.cmbTipo.SelectedValue = .tipo_not
                Me.cmbClasificacion.SelectedValue = .clasificacion_not
                Me.txtAbreviatura.Text = .abreviatura_not
                Me.txtVersion.Text = .version_not
                Me.txtAsunto.Text = .asunto_not
                ScriptManager.RegisterStartupScript(Me, Me.Page.GetType, "setCodigoPlantilla", "setCodigoPlantilla('" & fu_EliminarSaltosLinea(.cuerpo_not, "") & "');", True)
            End With

            Return True
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Function

    Private Function fu_ValidarCargarFormularioRegistro() As Boolean
        Try
            If Session("frmNotificaciones-codigo_not") Is Nothing OrElse String.IsNullOrEmpty(Session("frmNotificaciones-codigo_not")) Then mt_ShowMessage("El código de notificación no ha sido encontrado.", MessageType.warning) : Return False

            Return True
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Function

    Private Function mt_RegistrarNotificacion(ByVal codigo_not As Integer) As Boolean
        Try
            If Not fu_ValidarRegistrarNotificacion() Then Return False

            me_Notificacion = md_Notificacion.GetNotificacion(codigo_not)

            With me_Notificacion
                .operacion = "I"
                .cod_user = cod_user
                .tipo_not = cmbTipo.SelectedValue
                .clasificacion_not = cmbClasificacion.SelectedValue
                .nombre_not = txtNombre.Text.Trim
                .abreviatura_not = txtAbreviatura.Text.Trim
                .version_not = txtVersion.Text.Trim
                .asunto_not = txtAsunto.Text.Trim
                .cuerpo_not = HttpUtility.UrlDecode(Me.txtPlantilla.Value)
            End With

            md_Notificacion.RegistrarNotificacion(me_Notificacion)

            Call mt_ShowMessage("¡La notificación se registro exitosamente!", MessageType.success)

            Return True
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Function

    Private Function fu_ValidarRegistrarNotificacion() As Boolean
        Try
            Dim ls_Plantilla As String = HttpUtility.UrlDecode(Me.txtPlantilla.Value)

            If String.IsNullOrEmpty(Me.cmbTipo.SelectedValue.Trim) Then mt_ShowMessage("Debe seleccionar un tipo.", MessageType.warning) : Me.cmbTipo.Focus() : Return False
            If String.IsNullOrEmpty(Me.cmbClasificacion.SelectedValue.Trim) Then mt_ShowMessage("Debe seleccionar una clasificación.", MessageType.warning) : Me.cmbClasificacion.Focus() : Return False
            If String.IsNullOrEmpty(Me.txtNombre.Text.Trim) Then mt_ShowMessage("Debe ingresar un nombre.", MessageType.warning) : Me.txtNombre.Focus() : Return False
            If String.IsNullOrEmpty(Me.txtAbreviatura.Text.Trim) Then mt_ShowMessage("Debe ingresar una abreviatura.", MessageType.warning) : Me.txtAbreviatura.Focus() : Return False
            If String.IsNullOrEmpty(Me.txtVersion.Text.Trim) Then mt_ShowMessage("Debe ingresar una versión.", MessageType.warning) : Me.txtVersion.Focus() : Return False
            If String.IsNullOrEmpty(Me.txtAsunto.Text.Trim) Then mt_ShowMessage("Debe ingresar un asunto.", MessageType.warning) : Me.txtAsunto.Focus() : Return False
            If String.IsNullOrEmpty(ls_Plantilla.Trim) OrElse ls_Plantilla.Trim = "<p>&nbsp;</p>" OrElse ls_Plantilla.Trim = "<p><br></p>" Then mt_ShowMessage("Debe ingresar un cuerpo.", MessageType.warning) : Return False

            'Validar duplicados
            me_Notificacion = New e_Notificaciones
            Dim dt As New DataTable

            With me_Notificacion
                .operacion = "GEN"
                .tipo_not = cmbTipo.SelectedValue
                .clasificacion_not = cmbClasificacion.SelectedValue
                .abreviatura_not = txtAbreviatura.Text.Trim
                .version_not = txtVersion.Text.Trim
            End With

            dt = md_Notificacion.ListarNotificacion(me_Notificacion)

            If dt.Rows.Count > 0 AndAlso CInt(Session("frmNotificaciones-codigo_not")) = 0 Then mt_ShowMessage("Existe un registro con este tipo, clasificación, abreviatura y versión.", MessageType.warning) : Return False

            For Each fila As DataRow In dt.Rows
                If CInt(Session("frmNotificaciones-codigo_not")) <> CInt(fila("codigo_not")) Then mt_ShowMessage("Existe un registro con este tipo, clasificación, abreviatura y versión.", MessageType.warning) : Return False
            Next

            Return True
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Function

    Private Function mt_EliminarNotificacion(ByVal codigo_not As Integer) As Boolean
        Try
            me_Notificacion = md_Notificacion.GetNotificacion(codigo_not)

            With me_Notificacion
                .operacion = "D"
                .codigo_not = codigo_not
                .cod_user = cod_user
            End With

            md_Notificacion.RegistrarNotificacion(me_Notificacion)

            mt_ShowMessage("¡La notificación se elimino exitosamente!", MessageType.success)

            Return True
        Catch ex As Exception
            Call mt_ShowMessage(ex.Message.Replace("'", " "), MessageType.error)
        End Try
    End Function

    Private Function fu_EliminarSaltosLinea(ByVal texto As String, ByVal caracter_reemplazar As String) As String
        Try
            Return Replace(Replace(texto, Chr(10), caracter_reemplazar), Chr(13), caracter_reemplazar)
        Catch ex As Exception
            Throw ex
        End Try
    End Function
#End Region

End Class
